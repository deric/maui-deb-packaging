#!/bin/bash
#
#   $ ./build_maui
#
set -o errexit -o nounset -o pipefail
export LC_ALL=C
function -h {
cat <<USAGE
Maui building script

USAGE
}; function --help { -h ;}

this="$(cd "$(dirname "$0")" && pwd -P)"
name="maui"
version="${version:-9999}"

function main {
  while [[ $# -gt 0 ]]
  do
    case "$1" in                                      # Munging globals, beware
      --version)                version="$2" ; shift 2 ;;
      *)                        err 'Argument error. Please see help.' ;;
    esac
  done
  go
}

function go {
  dependencies
  cleanup
  build
  create_installation
  pkg
}

function lsb_release_tag {
  lsb_release --id --release | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
}

function get_codename {
  case "$(lsb_release_tag)" in
    ubuntu/*|debian/*)
      lsb_release -c | cut -d: -f2 | tr A-Z a-z | xargs | tr ' ' '/'
    ;;
    centos/*|redhat/*)
      err "not implemented yet"
    ;;
    *)                 err "Not sure how to get codename for: $linux" ;;
  esac
}

function architecture {
  case "$(lsb_release_tag)" in
    ubuntu/*|debian/*) dpkg-architecture -qDEB_BUILD_ARCH ;;
    centos/*|redhat/*) arch ;;
    *)                 err "Not sure how to determine arch for: $linux" ;;
  esac
}

function get_system_info {
  linux="$(os_release)"                 # <distro>/<version>, like ubuntu/12.10
  arch="$(architecture)"          # In the format used to label distro packages
  gem_bin="$(find_gem_bin)"                          # Might not be on the PATH
  codename="$(get_codename)"
}

function find_gem_bin {
  gem env | sed -n '/^ *- EXECUTABLE DIRECTORY: */ { s/// ; p }'
}

function url_fragment {
  local step1="${1%#}"#       # Ensure URL ends in #, even if it has a fragment
  local step2="${step1#*#}"                                # Clip up to first #
  out "${step2%#}"                    # Remove trailing #, guaranteed by step 1
}

# Split URL in to resource, query and fragment.
function url_split {
  local fragment= query=
  local sans_fragment="${1%%#*}"
  local sans_query="${sans_fragment%%'?'*}"
  [[ $1             = $sans_fragment ]] || fragment="${1#*#}"
  [[ $sans_fragment = $sans_query    ]] || query="${sans_fragment#*'?'}"
  out "$sans_query"
  out "$query"
  out "$fragment"
}

function dependencies {
  #check dependencies
  DEPENDENCIES=(make)
  i=0
  expstatus="Status: install ok installed"
  for package in ${DEPENDENCIES[@]}
  do
    status=`dpkg -s ${package} | grep Status:`
   if [[ "${status}" != *"${expstatus}"* ]]; then
     err "missing package: ${package}"
     i=$((i+1))
   fi
  done
  if [[ i -gt 0 ]]; then
    echo "please install missing dependencies"
    exit 1
  fi
}

function cleanup {
  if [ -e "$this"/*.deb ];then
    msg "removing old deb package"
    rm "$this"/*.deb
  fi
  if [ -d "$this"/dist ]; then
    msg "removing old deb directory"
    rm -rf "$this"/dist
  fi

  for i in $(ls -d maui*/); do
    echo "removing directory ${i%%/}";
    rm -r "${i%%/}"
  done
}

function build {
  msg "checking tar archive..."
  local tar="$(ls maui-*.tar.gz | cut -f1)"
  if [ -f $tar ];then
    tar xvf $tar
  else
    err "could not find maui tar archive"
    exit 1;
  fi
  FWDIR="$(pwd)"
  DISTDIR="$FWDIR/dist"
  mkdir -p "${DISTDIR}/opt/maui"
  SRC_DIR="${FWDIR}/$(ls -d maui*/ | cut -f1 -d'/' | head -n 1)"
  msg "source dir: ${SRC_DIR}"
  cd $SRC_DIR
  ./configure --prefix=${DISTDIR}/opt/maui --with-server-home=/var/spool/maui --enable-server \
--enable-clients --with-scp --enable-mom --with-pbs=/usr/bin
  make
  make install
}

function create_installation {(
  mkdir -p $DISTDIR
  cd $DISTDIR

  mkdir -p etc/init.d
  cp ${this}/scripts/init.d etc/init.d/maui
  chmod +x etc/init.d/maui
  mkdir -p var/spool/maui
  cp ${SRC_DIR}/maui.cfg.dist var/spool/maui/maui.cfg
)}

function pkg {
  echo "creating package..."
  local scripts="${linux%%/*}"
  local opts=( -t deb )
  fpm_ "${opts[@]}" -p "$this"/"$name-$version.deb"

}

function fpm_ {
  local version="$version"
  local opts=( -s dir
               -n "$name"
               -v "$version"
               --description "Maui"
               --url="http://www.adaptivecomputing.com/support/download-center/maui-cluster-scheduler/"
               -a "$arch"
               --license "End User Open Source License"
               --category misc
               --vendor "Adaptive Computing"
               -m info@adaptivecomputing.com
               --after-install "$this/scripts/postinst.sh"
               --prefix=/ )
  ( cd "${this}/dist" && "$gem_bin"/fpm "${opts[@]}" "$@" -- . )
}

function os_release {
  msg "Trying /etc/os-release..."
  if [[ -f /etc/os-release ]]
  then
    ( source /etc/os-release && display_version "$ID" "$VERSION_ID" )
    return 0
  fi
  msg "Trying /etc/redhat-release..."
  if [[ -f /etc/redhat-release ]]
  then
    # Seems to be formatted as: <distro> release <version> (<remark>)
    #                           CentOS release 6.3 (Final)
    if [[ $(cat /etc/redhat-release) =~ \
          ^(.+)' '+release' '+([^ ]+)' '+'('[^')']+')'$ ]]
    then
      local os
      case "${BASH_REMATCH[1]}" in
        'Red Hat '*) os=RedHat ;;
        *)           os="${BASH_REMATCH[1]}" ;;
      esac
      display_version "$os" "${BASH_REMATCH[2]}"
      return 0
    else
      err "/etc/redhat-release not like: <distro> release <version> (<remark>)"
    fi
  fi
  if which sw_vers &> /dev/null
  then
    local product="$(sw_vers -productName)"
    case "$product" in
      'Mac OS X') display_version MacOSX "$(sw_vers -productVersion)" ;;
      *) err "Expecting productName to be 'Mac OS X', not '$product'!";;
    esac
    return 0
  fi
  err "Could not determine OS version!"
}

function display_version {
  local os="$( tr A-Z a-z <<<"$1" )" version="$( tr A-Z a-z <<<"$2" )"
  case "$os" in
    redhat|centos|debian) out "$os/${version%%.*}" ;;   # Ignore minor versions
    macosx)               out "$os/${version%.*}" ;;  # Ignore bug fix releases
    *)                    out "$os/$version" ;;
  esac
}


function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then
  case "$1" in
    -h|--help|go|url_split|create_installation|checkout|build|osx_) : ;;
    *) get_system_info ;;
  esac
  "$@"
else
  get_system_info
  main "$@"
fi

